// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: proto/user.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

/** 사용자 조회 요청 */
export interface GetUserRequest {
  userId: string;
}

/** 사용자 조회 응답 */
export interface GetUserResponse {
  id: string;
  name: string;
  email: string;
  role: string;
  signType: string;
  isVerified: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

/** 프로필 업데이트 요청 */
export interface UpdateProfileRequest {
  userId: string;
  name: string;
  email: string;
}

/** 프로필 업데이트 응답 */
export interface UpdateProfileResponse {
  id: string;
  name: string;
  email: string;
  role: string;
  signType: string;
  isVerified: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

/** 사용자 삭제 요청 */
export interface DeleteUserRequest {
  userId: string;
}

/** 사용자 삭제 응답 */
export interface DeleteUserResponse {
  success: boolean;
  message: string;
}

/** 사용자 목록 조회 요청 */
export interface GetUsersRequest {
  page: number;
  limit: number;
  search: string;
}

/** 사용자 목록 조회 응답 */
export interface GetUsersResponse {
  users: UserInfo[];
  total: number;
  page: number;
  limit: number;
}

/** 사용자 정보 */
export interface UserInfo {
  id: string;
  name: string;
  email: string;
  role: string;
  signType: string;
  isVerified: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

/** 비밀번호 변경 요청 */
export interface ChangePasswordRequest {
  userId: string;
  newPassword: string;
}

/** 비밀번호 변경 응답 */
export interface ChangePasswordResponse {
  id: string;
  name: string;
  email: string;
  role: string;
  signType: string;
  isVerified: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

export const USER_PACKAGE_NAME = "user";

/** 사용자 서비스 정의 */

export interface UserServiceClient {
  /** 사용자 정보 조회 */

  getUser(request: GetUserRequest, metadata?: Metadata): Observable<GetUserResponse>;

  /** 사용자 프로필 업데이트 */

  updateProfile(request: UpdateProfileRequest, metadata?: Metadata): Observable<UpdateProfileResponse>;

  /** 사용자 삭제 (소프트 삭제) */

  deleteUser(request: DeleteUserRequest, metadata?: Metadata): Observable<DeleteUserResponse>;

  /** 사용자 목록 조회 */

  getUsers(request: GetUsersRequest, metadata?: Metadata): Observable<GetUsersResponse>;

  /** 비밀번호 변경 */

  changePassword(request: ChangePasswordRequest, metadata?: Metadata): Observable<ChangePasswordResponse>;
}

/** 사용자 서비스 정의 */

export interface UserServiceController {
  /** 사용자 정보 조회 */

  getUser(
    request: GetUserRequest,
    metadata?: Metadata,
  ): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  /** 사용자 프로필 업데이트 */

  updateProfile(
    request: UpdateProfileRequest,
    metadata?: Metadata,
  ): Promise<UpdateProfileResponse> | Observable<UpdateProfileResponse> | UpdateProfileResponse;

  /** 사용자 삭제 (소프트 삭제) */

  deleteUser(
    request: DeleteUserRequest,
    metadata?: Metadata,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;

  /** 사용자 목록 조회 */

  getUsers(
    request: GetUsersRequest,
    metadata?: Metadata,
  ): Promise<GetUsersResponse> | Observable<GetUsersResponse> | GetUsersResponse;

  /** 비밀번호 변경 */

  changePassword(
    request: ChangePasswordRequest,
    metadata?: Metadata,
  ): Promise<ChangePasswordResponse> | Observable<ChangePasswordResponse> | ChangePasswordResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUser", "updateProfile", "deleteUser", "getUsers", "changePassword"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
