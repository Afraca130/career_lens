// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: proto/auth.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** 회원가입 요청 */
export interface SignupRequest {
  name: string;
  email: string;
  password: string;
  signType: string;
}

/** 회원가입 응답 */
export interface SignupResponse {
  id: string;
  name: string;
  email: string;
  role: string;
  signType: string;
  isVerified: boolean;
  createdAt: string;
}

/** 로그인 요청 */
export interface LoginRequest {
  email: string;
  password: string;
}

/** 로그인 응답 */
export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
  user: UserInfo | undefined;
}

/** 사용자 정보 */
export interface UserInfo {
  id: string;
  email: string;
  name: string;
  role: string;
}

/** 토큰 검증 요청 */
export interface VerifyTokenRequest {
  token: string;
}

/** 토큰 검증 응답 */
export interface VerifyTokenResponse {
  userId: string;
  email: string;
  type: string;
  iat: number;
  exp: number;
}

/** Refresh Token 요청 */
export interface RefreshTokenRequest {
  refreshToken: string;
}

/** Refresh Token 응답 */
export interface RefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}

export const AUTH_PACKAGE_NAME = "auth";

/** 인증 서비스 정의 */

export interface AuthServiceClient {
  /** 회원가입 */

  signup(request: SignupRequest, metadata?: Metadata): Observable<SignupResponse>;

  /** 로그인 */

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  /** 토큰 검증 */

  verifyToken(request: VerifyTokenRequest, metadata?: Metadata): Observable<VerifyTokenResponse>;

  /** Refresh Token으로 Access Token 재발급 */

  refreshToken(request: RefreshTokenRequest, metadata?: Metadata): Observable<RefreshTokenResponse>;
}

/** 인증 서비스 정의 */

export interface AuthServiceController {
  /** 회원가입 */

  signup(
    request: SignupRequest,
    metadata?: Metadata,
  ): Promise<SignupResponse> | Observable<SignupResponse> | SignupResponse;

  /** 로그인 */

  login(request: LoginRequest, metadata?: Metadata): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** 토큰 검증 */

  verifyToken(
    request: VerifyTokenRequest,
    metadata?: Metadata,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;

  /** Refresh Token으로 Access Token 재발급 */

  refreshToken(
    request: RefreshTokenRequest,
    metadata?: Metadata,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signup", "login", "verifyToken", "refreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
